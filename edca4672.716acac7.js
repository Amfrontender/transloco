(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{142:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(6),l=(t(0),t(147)),o={title:"The Transpiler"},i={id:"transpiler",isDocsHomePage:!1,title:"The Transpiler",description:"The transpiler is responsible for resolving the given value.",source:"@site/docs/transpiler.mdx",permalink:"/transloco/docs/transpiler",editUrl:"https://github.com/ngneat/transloco/edit/master/docs/docs/transpiler.mdx",sidebar:"docs",previous:{title:"Loading Template",permalink:"/transloco/docs/loading-template"},next:{title:"Hack The Library",permalink:"/transloco/docs/hack"}},s=[{value:"Functional Transpiler",id:"functional-transpiler",children:[{value:"Usage",id:"usage",children:[]},{value:"Usage Notes",id:"usage-notes",children:[]}]},{value:"Custom Transpiler",id:"custom-transpiler",children:[]}],c={rightToc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The transpiler is responsible for resolving the given value.",Object(l.b)("br",{parentName:"p"}),"\n","For example, when given ",Object(l.b)("inlineCode",{parentName:"p"},"Hello {{ key }}")," the default transpiler will replace the dynamic variable ",Object(l.b)("inlineCode",{parentName:"p"},"key")," based on the given params, or the translation object."),Object(l.b)("h2",{id:"functional-transpiler"},"Functional Transpiler"),Object(l.b)("p",null,"In addition to the default transpiler, Transloco also exposes the ",Object(l.b)("inlineCode",{parentName:"p"},"FunctionalTranspiler")," which allows you to implement function calls into your translation values.",Object(l.b)("br",{parentName:"p"}),"\n","This way you can leverage Angular's DI power and make your translations even more flexible."),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"FunctionalTranspiler")," is compatible with the ",Object(l.b)("inlineCode",{parentName:"p"},"DefaultTranspiler")," and therefore you can switch without worry that it will break your current translations."),Object(l.b)("p",null,"To enable this transpiler, add the following provider in your ",Object(l.b)("inlineCode",{parentName:"p"},"TranslocoRootModule"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'}),"import { FunctionalTranspiler, TRANSLOCO_TRANSPILER } from '@ngneat/transloco';\n\n@NgModule({\n  ...\n  providers: [{\n    provide: TRANSLOCO_TRANSPILER,\n    useClass: FunctionalTranspiler\n  }]\n})\nexport class TranslocoRootModule {}\n")),Object(l.b)("h3",{id:"usage"},"Usage"),Object(l.b)("p",null,"In order to use a function in the translation, we need to provide it to the transpiler.",Object(l.b)("br",{parentName:"p"}),"\n","We do so by creating a new class that implements the ",Object(l.b)("inlineCode",{parentName:"p"},"TranslocoTranspilerFunction")," interface.",Object(l.b)("br",{parentName:"p"}),"\n","For example, let's say we want to display different texts in case the user has a specific feature exposed or not:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="has-feature-flag.ts"',title:'"has-feature-flag.ts"'}),"import { FFService } from './feature-flag.service';\nimport { TranslocoTranspilerFunction } from '@ngneat/transloco';\n\nclass FeatureFlagResolver implements TranslocoTranspilerFunction {\n  constructor(private featureFlagService: FFService) {}\n  \n  transpile(...args: string[]): any {\n    const [flagName, trueValue, falseValue] = args;\n    \n    return this.featureFlagService.hasFF(flagName) ? trueValue : falseValue;\n  }\n}\n")),Object(l.b)("p",null,"As you can see the ",Object(l.b)("inlineCode",{parentName:"p"},"transpile")," function can accept any number of arguments, you are the one who defines which arguments will be passed. In my case I'm passing 3:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The feature flag's name."),Object(l.b)("li",{parentName:"ul"},"The value I want to present in case the user has the flag."),Object(l.b)("li",{parentName:"ul"},"The value I want to present in case the user doesn't have the flag.")),Object(l.b)("p",null,"Now we will add this transpiler function to the ",Object(l.b)("inlineCode",{parentName:"p"},"TranslocoRootModule")," providers:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'}),"import { FunctionalTranspiler, TRANSLOCO_TRANSPILER } from '@ngneat/transloco';\nimport { FeatureFlagResolver } from './has-feature-flag';\n\n@NgModule({\n  ...\n  providers: [{\n    provide: TRANSLOCO_TRANSPILER,\n    useClass: FunctionalTranspiler\n  },\n  {\n    provide: 'hasFeatureFlag', // ====> The function name used in the translation\n    useClass: FeatureFlagResolver\n  }],\n})\nexport class TranslocoRootModule {}\n")),Object(l.b)("p",null,"The functional syntax is very similar to calling a regular function, here is an example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="en.json"',title:'"en.json"'}),'{\n  "title": "[[ hasFeatureFlag(newDashboards, has flag, missing flag) ]]",\n}\n')),Object(l.b)("p",null,"In this case, we are checking if the user has ",Object(l.b)("inlineCode",{parentName:"p"},"newDashboard")," flag, in case he does, we want to display",Object(l.b)("br",{parentName:"p"}),"\n",Object(l.b)("inlineCode",{parentName:"p"},"'has flag'")," and otherwise, we will display ",Object(l.b)("inlineCode",{parentName:"p"},"'missing flag'"),"."),Object(l.b)("h3",{id:"usage-notes"},"Usage Notes"),Object(l.b)("p",null,"If the function returns a string that includes the interpolation syntax (",Object(l.b)("inlineCode",{parentName:"p"},"{{value}}"),"), the transpiler will replace it with the ",Object(l.b)("inlineCode",{parentName:"p"},"params")," or ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../additional-functionality#reference-other-keys"}),"other keys references")," just like the default."),Object(l.b)("p",null,"If you function param needs to include a comma you need to escape it:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="en.json"',title:'"en.json"'}),'{\n  "title": "[[ someFunc(Hello {{user}}\\\\, welcome ,...) ]]",\n}\n')),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"'Hello {{user}}, welcome'")," will be the first param passed."),Object(l.b)("h2",{id:"custom-transpiler"},"Custom Transpiler"),Object(l.b)("p",null,"You can also provide a custom transpiler by creating a class that implements the ",Object(l.b)("inlineCode",{parentName:"p"},"TranslocoTranspiler")," interface."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { TranslocoTranspiler } from '@ngneat/transloco';\n\nexport class CustomTranspiler implements TranslocoTranspiler {\n  transpile(value: any, params, translation: Translation) {\n    return ...;\n  }\n}\n\nexport const customTranspiler = {\n  provide: TRANSLOCO_TRANSPILER,\n  useClass: CustomTranspiler\n}\n")))}p.isMDXComponent=!0},147:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,d=u["".concat(o,".").concat(m)]||u[m]||b[m]||l;return t?r.a.createElement(d,i(i({ref:n},c),{},{components:t})):r.a.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);